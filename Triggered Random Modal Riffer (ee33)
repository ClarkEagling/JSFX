desc:Triggered Random Modal Riffer (ee33) -- MIDI note 4 rerolls riff, note 3 plays riff, note 2 plays root note

// tick through root note w / MIDI note 9
// tick through modes w / MIDI note 8
// tick through octave range w/ MIDI note 7
// tick through loop length w / MIDI note6
// tick through spaciness w / MIDI note5


//Reset riff of selected random notes with MIDI note 4
// tick through riff with MIDI note 3


slider1:0<0,11,1{C,C#,D,D#,E,F,F#,G,G#,A,A#,B}>Root Note (A -2 Cycles)
slider2:0<0,7,1{ Ionian, Dorian, Phrygian, Lydian, Mixolydian, Aeolian, Locrian, Chromatic - 16 steps for rhythms}>Mode (G# -2 Cycles)
slider3:1<1,4,1>Octave range (G -2 Cycles)
slider4: 2<0,7,1{0,4,8,12,16,20,24,28,32}>Loop Length (F# -2 Cycles)
slider5: 10<0,10,1>Empty Space Likelihood (F -2 Cycles)
slider6: 48<12,72,12>Root Octave (A# -2 Cycles)

in_pin:none
out_pin:none

@init

octave = 1000;

octave[0] = 0;
octave[1] = 12;
octave[2] = 24;
octave[3] = 36; 
octave[4] = 48; 

ionian = 3000;
dorian = 4000;
phrygian = 5000;
lydian = 6000;
mixolydian = 7000;
aeolian = 8000;
locrian = 9000;
chromatic = 13000;
notestoPlay = 10000;
velocities = 11000;
velForNote = 12000;

modesList = 2000;
modesList[0] = ionian;
modesList[1] = dorian;
modesList[2] = phrygian;
modesList[3] = lydian;
modesList[4] = mixolydian;
modesList[5] = aeolian;
modesList[6] = locrian;
modesList[7] = chromatic;

mem_set_values(  ionian,  0,2,4,5,7,9,11,12,0,2,4,5,7,9,11,12  );
mem_set_values(  dorian,  0,2,3,5,7,9,10,12,0,2,3,5,7,9,10,12  );
mem_set_values(  phrygian,  0,1,3,5,7,8,10,12,0,1,3,5,7,8,10,12  );
mem_set_values(  lydian,  0,2,4,6,7,9,11,12,0,2,4,6,7,9,11,12  );
mem_set_values(  myxolydian,  0,2,4,5,7,9,10,12,0,2,4,5,7,9,10,12  );
mem_set_values(  aeolian,  0,2,3,5,7,8,10,12,0,2,3,5,7,8,10,12  );
mem_set_values(  locrian,  0,1,3,5,6,8,10,12,0,1,3,5,6,8,10,12  );
mem_set_values(  chromatic,  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15  );
mem_set_values(velocities,0.5,0.75,1,0,0,0,0,0,0,0,0.25);

playThisNote = 0;
thisVelocity = 0;

@block
rootOctave = slider6;
rootNote = slider1+slider6;
modeCurrent = modesList[slider2];
octavesMax = slider3;
loopLength = slider4*4;
spaceLike = slider5+3;

//this code adjusts the sliders on MIDI trigger

while (midirecv(offset,msg1,msg2,msg3)) ( 

  currentNote = msg2;
  
  currentNote == 9 && msg1==$x90 ? (
    slider1 += 1;
    slider1 == 12 ? (
      slider1 = 0);
  );
  
  currentNote == 8 && msg1==$x90 ? (
    slider2 += 1;
    slider2 == 7 ? (
      slider2 = 0);
  );
  
  currentNote == 7 && msg1==$x90 ? (
    slider3 += 1;
    slider3 == 4 ? (
      slider3 = 0);
  );
  
  currentNote == 6 && msg1==$x90 ? (
    slider4 += 1;
    slider4 == 6 ? (
      slider4 = 2);
  );
  
  currentNote == 5 && msg1==$x90 ? (
    slider5 += 1;
    slider5 == 11 ? (
      slider5 = 1);
  );
  
  currentNote == 10 && msg1==$x90 ? (
    slider6 += 12;
    slider6 >= 73 ? (
      slider6 = 12);
  );
  
  // This code creates the riff
  
  currentNote == 4 && msg1==$x90 ? (
    note1  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note2  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note3  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note4  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note5  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note6  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note7  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note8  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note9  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note10  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note11  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note12  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note13  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note14  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note15  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note16  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note17  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note18  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note19  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note20  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note21  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note22  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note23  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note24  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note25  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note26  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note27  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note28  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note29  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note30  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note31  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    note32  =rootNote + modeCurrent[rand(16)] + octave[rand(octavesMax)];
    mem_set_values(notestoPlay,note1,note2,note3,note4,note5,note6,note7,note8,note9,note10,note11,note12,note13,note14,note15,note16,note17,note18,note19,note20,note21,note22,note23,note24,note25,note26,note27,note28,note29,note30,note31,note32);

    vel1  = velocities[rand(spaceLike)];
    vel2  = velocities[rand(spaceLike)];
    vel3  = velocities[rand(spaceLike)];
    vel4  = velocities[rand(spaceLike)];
    vel5  = velocities[rand(spaceLike)];
    vel6  = velocities[rand(spaceLike)];
    vel7  = velocities[rand(spaceLike)];
    vel8  = velocities[rand(spaceLike)];
    vel9  = velocities[rand(spaceLike)];
    vel10  = velocities[rand(spaceLike)];
    vel11  = velocities[rand(spaceLike)];
    vel12  = velocities[rand(spaceLike)];
    vel13  = velocities[rand(spaceLike)];
    vel14  = velocities[rand(spaceLike)];
    vel15  = velocities[rand(spaceLike)];
    vel16  = velocities[rand(spaceLike)];
    vel17  = velocities[rand(spaceLike)];
    vel18  = velocities[rand(spaceLike)];
    vel19  = velocities[rand(spaceLike)];
    vel20  = velocities[rand(spaceLike)];
    vel21  = velocities[rand(spaceLike)];
    vel22  = velocities[rand(spaceLike)];
    vel23  = velocities[rand(spaceLike)];
    vel24  = velocities[rand(spaceLike)];
    vel25  = velocities[rand(spaceLike)];
    vel26  = velocities[rand(spaceLike)];
    vel27  = velocities[rand(spaceLike)];
    vel28  = velocities[rand(spaceLike)];
    vel29  = velocities[rand(spaceLike)];
    vel30  = velocities[rand(spaceLike)];
    vel31  = velocities[rand(spaceLike)];
    vel32  = velocities[rand(spaceLike)];
    mem_set_values(velForNote,vel1,vel2,vel3,vel4,vel5,vel6,vel7,vel8,vel9,vel10,vel11,vel12,vel13,vel14,vel15,vel16,vel17,vel18,vel19,vel20,vel21,vel22,vel23,vel24,vel25,vel26,vel27,vel28,vel29,vel30,vel31,vel32);
    );

    noteRoot  =rootNote + modeCurrent[0];
    
// This code plays the riff

  currentNote == 3 ? (
    playThisNote < loopLength ? (

      msg1==$x90 ? (
      noteMsg = notestoplay[playThisNote];
      velMsg = velForNote[thisVelocity];
      midisend(offset,msg1,noteMsg,msg3*velMsg);
      );

      msg1==$x80 ? (
      midisend(offset,msg1,noteMsg,msg3);
      playThisNote += 1;
      thisVelocity += 1;
      );
      
    );
    playThisNote >= loopLength ? (
    midisend(offset,msg1,noteMsg,msg3); 
    playThisNote = 0;
    thisVelocity = 0;
    );
    
  );

// This code plays the root note


  currentNote == 2 ? (
   

      msg1==$x90 ? (

      velMsg = velForNote[thisVelocity];
      midisend(offset,msg1,noteRoot,msg3);
      );

      msg1==$x80 ? (
      midisend(offset,msg1,noteRoot,msg3);
      playThisNote += 1;
      thisVelocity += 1;
      );
    
  );

);
